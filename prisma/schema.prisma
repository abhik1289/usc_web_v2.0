// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  email              String          @unique
  firstName          String?         @map("firstName")
  lastName           String?         @map("lastName")
  password           String?
  isBan              Boolean         @default(false)
  role               String          @default("USER")
  isActive           Boolean         @default(false)
  activeToken        String?
  activeTokenExpires DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Testimonials       Testimonials[]
  Champions          Champions[]
  Main               Main[]
  DomainGroup        DomainGroup[]
  Roles              Roles[]
  DomainDetails      DomainDetails[]
  Leads              Leads[]
  Teachers           Teachers[]
  Event              Event[]

  @@map("users")
}

enum Role {
  ADMIN // Corresponds to admin
  SUPERADMIN // Corresponds to superadmin
  MODERATOR // Corresponds to moderator
}

model Event {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  banner_url        String
  publicId          String?
  location          String
  createdBy         User               @relation(fields: [userId], references: [id])
  userId            String             @db.ObjectId
  eventType         E_Type
  displayType       D_TYPE
  socialMedia       String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  eventDateSingle   eventDateSingle?
  eventDateMultitle eventDateMultitle?
  index             Int?                @default(0)
}

enum D_TYPE {
  PUBLIC
  PRIVATE
}

enum E_Type {
  SINGLE
  MULTIPLE
}

model eventDateSingle {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  startTime String
  endTime   String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?  @unique @db.ObjectId
}

model eventDateMultitle {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate1 DateTime
  startDate2 DateTime
  startTime1 String
  endTime1   String
  startTime2 String
  endTime2   String
  event      Event?   @relation(fields: [eventId], references: [id])
  eventId    String?  @unique @db.ObjectId
}

model Champions {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profilePhoto String

  fullName    String
  role        Roles    @relation(fields: [rolesId], references: [id])
  coverPhoto  String
  description String
  index       Int
  createdBy   User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  rolesId     String   @db.ObjectId
}

model Testimonials {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  photoUrl  String
  publicId  String?
  position  Roles    @relation(fields: [rolesId], references: [id])
  createdBy User     @relation(fields: [userId], references: [id])
  text      String
  index     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  rolesId   String   @db.ObjectId
}

model Roles {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  createdBy    User           @relation(fields: [userId], references: [id])
  Main         Main[]
  userId       String         @db.ObjectId
  Leads        Leads[]
  Testimonials Testimonials[]
  Champions    Champions[]
  Teachers     Teachers[]
}

model Main {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  roles          Roles?       @relation(fields: [rolesId], references: [id])
  domainGroups   DomainGroup? @relation(fields: [domainGroupsId], references: [id])
  createdBy      User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String       @db.ObjectId
  domainGroupsId String[]     @default([]) @db.ObjectId
  rolesId        String[]     @default([]) @db.ObjectId
}

model DomainGroup {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  createdBy       User            @relation(fields: [userId], references: [id])
  Main            Main[]
  userId          String          @db.ObjectId
  domainDetailsId String?         @db.ObjectId
  DomainDetails   DomainDetails[]
  Leads           Leads[]
}

model DomainDetails {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  bannerUrl     String
  url           String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     User        @relation(fields: [userId], references: [id])
  domainGroup   DomainGroup @relation(fields: [domainGroupId], references: [id])
  userId        String      @db.ObjectId
  domainGroupId String      @db.ObjectId
  Leads         Leads[]
}

model Leads {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName             String
  isCoreMember         Boolean       @default(false)
  coreMemberPosition   Roles?        @relation(fields: [coreMemberPositionId], references: [id])
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  isCurrent            Boolean
  createdBy            User          @relation(fields: [userId], references: [id])
  userId               String        @db.ObjectId
  profilePhoto         String
  domainGroup          DomainGroup   @relation(fields: [domainGroupId], references: [id])
  domainGroupId        String        @db.ObjectId
  domainName           DomainDetails @relation(fields: [domainNameId], references: [id])
  domainNameId         String        @db.ObjectId
  index                Int
  coreMemberPositionId String?       @db.ObjectId
  Social               Social?
  publicId             String?
}

model Social {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  lead         Leads?  @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId       String? @unique @db.ObjectId
  githubUrl    String?
  instagramUrl String?
  email        String
  portfolioUrl String?
  linkedinUrl  String?
}

model Teachers {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  school         String
  profilePhoto   String
  publicId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  Roles          Roles?   @relation(fields: [rolesId], references: [id])
  rolesId        String?  @db.ObjectId
  index          Int
  customPosition String?
  memberType     MType
}

enum MType {
  Mentor
  Advisor
}
